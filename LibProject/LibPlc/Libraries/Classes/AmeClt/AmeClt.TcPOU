<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AmeClt" Id="{7afb484f-e0ae-40d6-9e55-6bf9b6778827}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC AmeClt EXTENDS TcpIpClt Implements I_AmeClt
VAR
	_sMsgToSend			:STRING(P_AmeClt.MAX_SIZE_MSG_TO_SEND);
	_sMsgReceived		:STRING(P_AmeClt.MAX_SIZE_MSG_TO_RCV);
	_sSeparator			:STRING(1) 	:= '|';
	_eFSM_SendRcvSqLastState	:E_FSM_SendRcvSq;
	_eFSM_SendRcvSq				:E_FSM_SendRcvSq;
	_eFSM_AmeCltSqLastState		:E_FSM_AmeCltSq;
	_eFSM_AmeCltSq				:E_FSM_AmeCltSq;
END_VAR

VAR CONSTANT
	_sTYPE	:STRING(1) := '1';
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{e0a97ff2-9df1-0c9b-061c-09c9ad1cf88c}">
      <Folder Name="Assy" Id="{10fdf523-8c5a-0a0d-38dd-3b31e75924fd}" />
    </Folder>
    <Folder Name="Properties" Id="{0423cffa-5213-0a9c-0b47-bf2fda360f8e}" />
    <Method Name="AssyComplete_3011" Id="{4067330e-bc67-035b-24b2-01db049816dd}" FolderPath="Methods\Assy\">
      <Declaration><![CDATA[METHOD PUBLIC AssyComplete_3011 : BOOL
VAR_INPUT
	sSFC		:STRING;
	eState		:E_AssyState;
	usiOpIndex	:USINT;
END_VAR

VAR
	_sActionCall	:STRING(4) 	:= '3011';
	_sState			:STRING(1);
	_sOpIndex		:STRING(2);
	_bError			:BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _eFSM_AmeCltSq OF
	E_FSM_AmeCltSq.IDLE:
		IF THIS^._eFSM_SendRcvSq = E_FSM_SendRcvSq.ERROR THEN
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.IDLE;
		END_IF
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.IDLE;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.CREATE_MSG_TO_SEND;
		
	E_FSM_AmeCltSq.CREATE_MSG_TO_SEND:
		_sState	:= INT_TO_STRING(eState);
		_sOpIndex := USINT_TO_STRING(usiOpIndex);
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sTYPE),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
			
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(_sActionCall),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(sSFC),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(_sState),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(_sOpIndex),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CREATE_MSG_TO_SEND;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
		IF _bError THEN
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.ERROR;
		END_IF
		
	E_FSM_AmeCltSq.CALL_SEND_RCV_SQ:
		IF SendRcvSq() THEN
			THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.DONE;
		END_IF
		
		IF bError THEN
			THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.ERROR;
		END_IF
		
	E_FSM_AmeCltSq.ERROR:
		AssyComplete_3011 := TRUE;
		
	E_FSM_AmeCltSq.DONE:
		AssyComplete_3011 := TRUE;
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.DONE;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.IDLE;	
END_CASE



]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssyGetDetails_1026" Id="{704633e2-6953-0531-1195-52cab7923bad}" FolderPath="Methods\Assy\">
      <Declaration><![CDATA[METHOD PUBLIC AssyGetDetails_1026 : BOOL
VAR_INPUT
	sSFC		:STRING;
	usiOpIndex	:USINT;
END_VAR

VAR
	_sActionCall	:STRING(4) 	:= '1026';
	_sOpIndex		:STRING(2);
	_bError			:BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _eFSM_AmeCltSq OF
	E_FSM_AmeCltSq.IDLE:
		IF THIS^._eFSM_SendRcvSq = E_FSM_SendRcvSq.ERROR THEN
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.IDLE;
		END_IF
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.IDLE;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.CREATE_MSG_TO_SEND;
		
	E_FSM_AmeCltSq.CREATE_MSG_TO_SEND:
		_sOpIndex := USINT_TO_STRING(usiOpIndex);
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sTYPE),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
			
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(_sActionCall),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(sSFC),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(THIS^._sSeparator),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		IF NOT _bError AND_THEN NOT f_StringConcat(ADR(THIS^._sMsgToSend),ADR(_sOpIndex),ADR(THIS^._sMsgToSend),SIZEOF(THIS^._sMsgToSend)) THEN
			_bError := TRUE;
		END_IF
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CREATE_MSG_TO_SEND;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
		IF _bError THEN
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.ERROR;
		END_IF
		
	E_FSM_AmeCltSq.CALL_SEND_RCV_SQ:
		IF SendRcvSq() THEN
			THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.DONE;
		END_IF
		
		IF bError THEN
			THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.CALL_SEND_RCV_SQ;
			THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.ERROR;
		END_IF
		
	E_FSM_AmeCltSq.ERROR:
		AssyGetDetails_1026 := TRUE;
		
	E_FSM_AmeCltSq.DONE:
		AssyGetDetails_1026 := TRUE;
		
		THIS^._eFSM_AmeCltSqLastState := E_FSM_AmeCltSq.DONE;
		THIS^._eFSM_AmeCltSq := E_FSM_AmeCltSq.IDLE;	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendRcvSq" Id="{aca7c2f9-54f5-0211-29df-0c15e417a365}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PROTECTED SendRcvSq : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE THIS^._eFSM_SendRcvSq OF
	E_FSM_SendRcvSq.IDLE:
		//IF SUPER^._eFSM_TcpIpClt = E_FSM_TcpIpClt.ERROR THEN
		//	SUPER^._eFSM_TcpIpClt := E_FSM_TcpIpClt.IDLE;
		//END_IF
		//
		//THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.IDLE;	
		//THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.OPEN_SOCKET;
		IF Reset() THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.IDLE;	
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.OPEN_SOCKET;
		END_IF
		
	E_FSM_SendRcvSq.OPEN_SOCKET:
		IF OpenSocket() THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.OPEN_SOCKET;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.SEND_DATA;
		END_IF
		
		IF bError THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.OPEN_SOCKET;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.ERROR;
		END_IF
		
	E_FSM_SendRcvSq.SEND_DATA:
		IF Send(ADR(_sMsgToSend), f_StringLen(ADR(_sMsgToSend), SIZEOF(_sMsgToSend))) THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.SEND_DATA;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.RCV_DATA;
		END_IF
		
		IF bError THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.SEND_DATA;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.ERROR;
		END_IF
		
	E_FSM_SendRcvSq.RCV_DATA:
		IF Rcv(ADR(_sMsgReceived), SIZEOF(_sMsgReceived)) THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.RCV_DATA;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.DONE;
		END_IF
		
		IF bError THEN
			THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.RCV_DATA;
			THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.ERROR;
		END_IF
		
	E_FSM_SendRcvSq.ERROR:
		// Error handling could be implemented here
		SendRcvSq := TRUE;
		
	E_FSM_SendRcvSq.DONE:
		SendRcvSq := TRUE;
		
		THIS^._eFSM_SendRcvSqLastState := E_FSM_SendRcvSq.DONE;
		THIS^._eFSM_SendRcvSq := E_FSM_SendRcvSq.IDLE;
				
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="sMsgReceived" Id="{e17ffe3d-ef83-0557-1fc5-27cbd6f4ca95}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY sMsgReceived : STRING(P_AmeClt.MAX_SIZE_MSG_TO_RCV)
]]></Declaration>
      <Get Name="Get" Id="{d80a0a36-baca-00ca-36fb-9b754b5ae5e9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sMsgReceived := this^._sMsgReceived;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="sMsgToSend" Id="{bd121268-9538-05d6-0392-76db5cfcbf0e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY sMsgToSend : STRING(P_AmeClt.MAX_SIZE_MSG_TO_SEND)
]]></Declaration>
      <Get Name="Get" Id="{88772ead-00a5-0c8c-0af1-4585fb230212}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sMsgToSend := THIS^._sMsgToSend;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>